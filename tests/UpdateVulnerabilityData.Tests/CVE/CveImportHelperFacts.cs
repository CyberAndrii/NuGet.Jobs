// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using NuGet.Services.Entities;
using UpdateVulnerabilityData.CVE;
using Xunit;

namespace UpdateVulnerabilityData.Tests.CVE
{
    public class CveImportHelperFacts
    {
        public class TheMustAddToInitialImportMethod
        {
            [Theory]
            [InlineData("** REJECT ** description text")]
            [InlineData("** REJECT * description text")]
            [InlineData("** RESERVED ** description text")]
            [InlineData("** RESERVED * description text")]
            public void ReturnsFalseForSkippedCveStatus(string cveDescription)
            {
                var addToInitialImport = CveImportHelper.MustAddToInitialImport(cveDescription);

                Assert.False(addToInitialImport);
            }

            [Theory]
            [InlineData("** DISPUTED ** description text")]
            [InlineData("** DISPUTED * description text")]
            [InlineData("** SPLIT ** description text")]
            [InlineData("** SPLIT * description text")]
            [InlineData("** UNVERIFIABLE ** description text")]
            [InlineData("** UNVERIFIABLE * description text")]
            [InlineData("** UNVERIFIABLE, PRERELEASE ** description text")]
            [InlineData("** UNVERIFIABLE, PRERELEASE * description text")]
            public void ReturnsTrueForAllowedCveStatus(string cveDescription)
            {
                var addToInitialImport = CveImportHelper.MustAddToInitialImport(cveDescription);

                Assert.True(addToInitialImport);
            }
        }

        public class TheDetermineListedMethod
        {
            [Theory]
            [InlineData("** REJECT ** description text")]
            [InlineData("** REJECT * description text")]
            public void ReturnsFalseForUnlistedCveStatus(string cveDescription)
            {
                var listed = CveImportHelper.DetermineListed(cveDescription);

                Assert.False(listed);
            }

            [Theory]
            [InlineData("** RESERVED ** description text")]
            [InlineData("** RESERVED * description text")]
            [InlineData("** DISPUTED ** description text")]
            [InlineData("** DISPUTED * description text")]
            [InlineData("** SPLIT ** description text")]
            [InlineData("** SPLIT * description text")]
            [InlineData("** UNVERIFIABLE ** description text")]
            [InlineData("** UNVERIFIABLE * description text")]
            [InlineData("** UNVERIFIABLE, PRERELEASE ** description text")]
            [InlineData("** UNVERIFIABLE, PRERELEASE * description text")]
            public void ReturnsTrueForListedCveStatus(string cveDescription)
            {
                var listed = CveImportHelper.DetermineListed(cveDescription);

                Assert.True(listed);
            }
        }

        public class TheDetermineStatusMethod
        {
            [Theory]
            [InlineData("** REJECT ** description text", CveStatus.Rejected)]
            [InlineData("** REJECT * description text", CveStatus.Rejected)]
            [InlineData("** RESERVED ** description text", CveStatus.Reserved)]
            [InlineData("** RESERVED * description text", CveStatus.Reserved)]
            [InlineData("** DISPUTED ** description text", CveStatus.Disputed)]
            [InlineData("** DISPUTED * description text", CveStatus.Disputed)]
            [InlineData("** SPLIT ** description text", CveStatus.Split)]
            [InlineData("** SPLIT * description text", CveStatus.Split)]
            [InlineData("** UNVERIFIABLE ** description text", CveStatus.Unverifiable)]
            [InlineData("** UNVERIFIABLE * description text", CveStatus.Unverifiable)]
            [InlineData("** UNVERIFIABLE, PRERELEASE ** description text", CveStatus.Unverifiable)]
            [InlineData("** UNVERIFIABLE, PRERELEASE * description text", CveStatus.Unverifiable)]
            [InlineData("description text", CveStatus.Analyzed)]
            public void ReturnsExpectedCveStatus(string cveDescription, CveStatus expectedStatus)
            {
                var actualStatus = CveImportHelper.DetermineStatus(cveDescription);

                Assert.Equal(expectedStatus, actualStatus);
            }
        }
    }
}
