// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using UpdateVulnerabilityData.Storage;

namespace UpdateVulnerabilityData
{
    public abstract class VulnerabilityDataClient
    {
        public enum SqlTable
        {
            Cves,
            Cwes
        }

        private const int _defaultCommandTimeout = 1800; // 30 minutes max
        private const string _sqlSelectTop1FromTable = "SELECT TOP 1 * FROM [dbo].[{0}]";

        protected VulnerabilityDataClient(
            IOptionsSnapshot<UpdateVulnerabilityDataConfiguration> configuration,
            ILogger logger,
            IBackupDestination backupDestination,
            ITelemetryService telemetryService)
        {
            Configuration = configuration?.Value ?? throw new ArgumentNullException(nameof(configuration));
            Logger = logger ?? throw new ArgumentNullException(nameof(logger));
            BackupDestination = backupDestination ?? throw new ArgumentNullException(nameof(backupDestination));
            TelemetryService = telemetryService ?? throw new ArgumentNullException(nameof(telemetryService));
        }

        protected UpdateVulnerabilityDataConfiguration Configuration { get; }
        protected ILogger Logger { get; }
        protected ITelemetryService TelemetryService { get; }
        protected IBackupDestination BackupDestination { get; }

        protected void PrepareLocalDirectories(string importDirectory, string exportDirectory)
        {
            if (Directory.Exists(importDirectory))
            {
                Logger.LogInformation("Deleting folder '{ImportDirectory}'", importDirectory);
                Directory.Delete(importDirectory, recursive: true);
            }

            if (Directory.Exists(exportDirectory))
            {
                Logger.LogInformation("Deleting folder '{ExportDirectory}'", exportDirectory);
                Directory.Delete(exportDirectory, recursive: true);
            }

            Logger.LogInformation("Creating directory '{ImportDirectory}'", importDirectory);
            Directory.CreateDirectory(importDirectory);
            Logger.LogInformation("Creating directory '{ExportDirectory}'", exportDirectory);
            Directory.CreateDirectory(exportDirectory);
        }

        /// <summary>
        /// Constructs an empty <see cref="DataTable"/> of an existing SQL table using the provided open <see cref="SqlConnection"/>.
        /// </summary>
        /// <param name="table">The SQL table for which to generate an empty <see cref="DataTable"/>.</param>
        /// <param name="connection">The open <see cref="SqlConnection"/>.</param>
        /// <returns></returns>
        protected DataTable GetDataTable(SqlTable table, SqlConnection connection)
        {
            var tableName = table.ToString();
            var dataTable = new DataTable();
            var query = string.Format(_sqlSelectTop1FromTable, tableName);

            var tableAdapter = new SqlDataAdapter(query, connection)
            {
                MissingSchemaAction = MissingSchemaAction.Add
            };
            tableAdapter.Fill(dataTable);

            dataTable.Rows.Clear();

            // Remove Id column from in-memory data table.
            // These are auto-generated on the database upon insert.
            if (dataTable.Columns.Contains("Key"))
            {
                dataTable.PrimaryKey = null;
                dataTable.Columns.Remove("Key");
            }

            // Remove Timestamp column from in-memory data table.
            // These are auto-generated on the database upon insert.
            if (dataTable.Columns.Contains("Timestamp"))
            {
                dataTable.Columns.Remove("Timestamp");
            }

            dataTable.TableName = $"dbo.{tableName}";
            return dataTable;
        }

        protected SqlBulkCopy CreateNewSqlBulkCopy(SqlConnection sqlConnection, string tableName)
        {
            return new SqlBulkCopy(sqlConnection, SqlBulkCopyOptions.UseInternalTransaction | SqlBulkCopyOptions.TableLock, externalTransaction: null)
            {
                BatchSize = 25000,
                DestinationTableName = tableName,
                BulkCopyTimeout = _defaultCommandTimeout
            };
        }

        protected async Task BackupSourceDataAsync(string sourceFilePath, string eTag, ContentType contentType)
        {
            var fileInfo = new FileInfo(sourceFilePath);
            using (var fileStream = File.OpenRead(sourceFilePath))
            {
                await BackupDestination.WriteAsync(fileStream, fileInfo.Name, contentType, eTag);
            }
        }
    }
}