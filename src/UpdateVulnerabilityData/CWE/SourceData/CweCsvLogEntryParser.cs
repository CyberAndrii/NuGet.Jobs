// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;

namespace UpdateVulnerabilityData.CWE
{
    public class CweCsvLogEntryParser
    {
        private const int _nameMaxLength = 200;
        private const int _descriptionMaxLength = 300;

        public static CweCsvDocumentItem ParseLogEntryFromLine(int lineNumber, string line, Action<Exception, int> onErrorAction)
        {
            if (string.IsNullOrWhiteSpace(line))
            {
                return null;
            }

            // Ignore first row listing the column headers.
            if (lineNumber == 1)
            {
                return null;
            }

            // Ignore comment rows
            if (line.StartsWith("#"))
            {
                return null;
            }

            try
            {
                // columns are comma-separated
                var columns = GetLogLineRecords(line);

                var entry = new CweCsvDocumentItem();

                TrySetIntProperty(value => entry.CweId = value, columns[0]);
                TrySetStringProperty(value => entry.Name = value, columns[1].RemoveSurroundingQuotes().TruncateAtWordBoundary(_nameMaxLength));
                TrySetStringProperty(value => entry.Status = value, columns[3].RemoveSurroundingQuotes());                
                TrySetStringProperty(value => entry.Description = value, columns[4].RemoveSurroundingQuotes().TruncateAtWordBoundary(_descriptionMaxLength));

                return entry;
            }
            catch (FormatException e)
            {
                // skip this line but log the error
                if (onErrorAction == null)
                {
                    throw;
                }
                else
                {
                    onErrorAction.Invoke(e, lineNumber);

                    return null;
                }
            }
        }

        private static void TrySetStringProperty(Action<string> propertySetter, string record)
        {
            if (RecordContainsData(record))
            {
                propertySetter(record);
            }
            else
            {
                propertySetter(string.Empty);
            }
        }

        private static void TrySetIntProperty(Action<int> propertySetter, string record)
        {
            if (RecordContainsData(record))
            {
                propertySetter(int.Parse(record));
            }
        }

        private static string[] GetLogLineRecords(string line)
        {
            var records = new List<string>();

            var startIndex = 0;
            var betweenQuotes = false;
            var characterCount = line.Length;

            for (var i = 0; i < characterCount; i++)
            {
                char character = line[i];

                if (i + 1 == characterCount)
                {
                    // reached end of the line
                    var record = line.Substring(startIndex, characterCount - startIndex);
                    records.Add(record);
                }
                else if (character == '"')
                {
                    betweenQuotes = !betweenQuotes;
                    if (betweenQuotes)
                    {
                        startIndex = i;
                    }
                }
                else if (character == ',' && !betweenQuotes)
                {
                    var record = line.Substring(startIndex, i - startIndex);
                    records.Add(record);
                    startIndex = i + 1;
                }
            }

            return records.ToArray();
        }

        private static bool RecordContainsData(string record)
        {
            return !string.IsNullOrWhiteSpace(record) && record != "-" && record != "\"-\"";
        }
    }
}
