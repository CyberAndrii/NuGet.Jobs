// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;

namespace UpdateVulnerabilityData.CWE
{
    public class CweDataDownloader : ICweDataDownloader
    {
        public const string SourceUrl = "https://cwe.mitre.org/data/csv/699.csv.zip";

        private readonly HttpClient _httpClient;
        private readonly ILogger<CweDataDownloader> _logger;

        public CweDataDownloader(
            HttpClient httpClient,
            ILogger<CweDataDownloader> logger)
        {
            _httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        public async Task<FileDownloadResult> DownloadAndExtractCsvDataToDiskAsync(string targetFile, CancellationToken cancellationToken)
        {
            if (cancellationToken == null)
            {
                throw new ArgumentNullException(nameof(cancellationToken));
            }

            Stream fileStream = null;
            var stopwatch = Stopwatch.StartNew();

            try
            {
                // Download the file from the network to a temporary file.
                string etag;
                using (var response = await _httpClient.GetAsync(SourceUrl, HttpCompletionOption.ResponseHeadersRead))
                {
                    _logger.LogInformation(
                        "Received response {StatusCode}: {ReasonPhrase} of type {ContentType} for request {SourceUrl}",
                        response.StatusCode,
                        response.ReasonPhrase,
                        response.Content.Headers.ContentType,
                        SourceUrl);

                    if (response.StatusCode != HttpStatusCode.OK)
                    {
                        throw new InvalidOperationException($"Expected status code {HttpStatusCode.OK} for file download, actual: {response.StatusCode}");
                    }

                    etag = response.Headers.ETag.Tag;

                    using (var networkStream = await response.Content.ReadAsStreamAsync())
                    {
                        fileStream = File.Create(targetFile);

                        await networkStream.CopyToAsync(fileStream, 80 * 1024, cancellationToken);
                    }
                }

                fileStream.Position = 0;

                stopwatch.Stop();

                _logger.LogInformation(
                    "Downloaded {FileSizeInBytes} bytes in {DownloadElapsedTime} seconds for request {SourceUri}",
                    fileStream.Length,
                    stopwatch.Elapsed.TotalSeconds,
                    SourceUrl);

                fileStream.Close();

                using (var archive = ZipFile.OpenRead(targetFile))
                {
                    var targetDirectory = new FileInfo(targetFile).Directory.FullName;

                    // The archive should only contain a single CSV file.
                    var csvFile = archive.Entries.SingleOrDefault(e => e.FullName.EndsWith(".csv", StringComparison.OrdinalIgnoreCase));
                    if (csvFile == null)
                    {
                        throw new FileNotFoundException("The downloaded archive does not contain a single CSV file.");
                    }

                    // Gets the full path to ensure that relative segments are removed.
                    var destinationPath = Path.GetFullPath(Path.Combine(targetDirectory, csvFile.FullName));

                    // Ordinal match is safest, case-sensitive volumes can be mounted within volumes that
                    // are case-insensitive.
                    if (destinationPath.StartsWith(targetDirectory, StringComparison.Ordinal))
                    {
                        csvFile.ExtractToFile(destinationPath);
                    }

                    return new FileDownloadResult(destinationPath, etag);
                }
            }
            catch (Exception e)
            {
                _logger.LogError(
                    Error.FailedToDownloadCweData,
                    e,
                    "Exception thrown when trying to download CWE data from {SourceUri}",
                    SourceUrl);

                fileStream?.Dispose();

                throw;
            }
        }
    }
}
