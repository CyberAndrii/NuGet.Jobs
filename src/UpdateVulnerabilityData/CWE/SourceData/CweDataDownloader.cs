// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;

namespace UpdateVulnerabilityData.CWE
{
    public class CweDataDownloader : FileDownloader, ICweDataDownloader
    {
        public const string SourceUrl = "https://cwe.mitre.org/data/csv/699.csv.zip";

        public CweDataDownloader(
            HttpClient httpClient,
            ILogger<CweDataDownloader> logger)
            : base(httpClient, logger)
        {
        }

        public async Task<FileDownloadResult> DownloadAndExtractCsvDataToDiskAsync(string targetFile)
        {
            if (targetFile == null)
            {
                throw new ArgumentNullException(nameof(targetFile));
            }

            try
            {
                // Download the file from the network to a temporary file.
                var fileDownloadResult = await DownloadFileAsync(SourceUrl, targetFile);

                using (var archive = ZipFile.OpenRead(targetFile))
                {
                    var targetDirectory = new FileInfo(targetFile).Directory.FullName;

                    // The archive should only contain a single CSV file.
                    var csvFile = archive.Entries.SingleOrDefault(e => e.FullName.EndsWith(".csv", StringComparison.OrdinalIgnoreCase));
                    if (csvFile == null)
                    {
                        throw new FileNotFoundException("The downloaded archive does not contain a single CSV file.");
                    }

                    // Gets the full path to ensure that relative segments are removed.
                    var destinationPath = Path.GetFullPath(Path.Combine(targetDirectory, csvFile.FullName));

                    // Ordinal match is safest, case-sensitive volumes can be mounted within volumes that
                    // are case-insensitive.
                    if (destinationPath.StartsWith(targetDirectory, StringComparison.Ordinal))
                    {
                        csvFile.ExtractToFile(destinationPath);
                    }

                    return new FileDownloadResult(
                        destinationPath, 
                        fileDownloadResult.ETag, 
                        fileDownloadResult.Sha256,
                        fileDownloadResult.Size);
                }
            }
            catch (InvalidOperationException e)
            {
                Logger.LogError(
                    Error.FailedToDownloadCweData,
                    e,
                    "Exception thrown when trying to download CWE data from {SourceUri}",
                    SourceUrl);

                // This error should not block processing other data files.
                return new FileDownloadResult(Error.FailedToDownloadCweData);
            }
        }
    }
}