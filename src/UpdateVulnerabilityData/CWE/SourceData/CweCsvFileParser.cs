// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Diagnostics;
using System.IO;
using Microsoft.Extensions.Logging;

namespace UpdateVulnerabilityData.CWE
{
    public class CweCsvFileParser : ICweCsvFileParser
    {
        private readonly ILogger<CweCsvFileParser> _logger;

        public CweCsvFileParser(ILogger<CweCsvFileParser> logger)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        public CweCsvDocument Parse(string path)
        {
            if (path == null)
            {
                throw new ArgumentNullException(nameof(path));
            }

            _logger.LogInformation("Parsing {FilePath}", path);

            return ParseCsv(path);
        }

        private CweCsvDocument ParseCsv(string csvFilePath)
        {
            // Parse the log lines into entities.
            _logger.LogInformation("Beginning to parse CWE data file {CsvFilePath}.", csvFilePath);

            var stopwatch = Stopwatch.StartNew();
            var logStream = File.OpenRead(csvFilePath);

            try
            {
                var csvDocument = new CweCsvDocument();

                using (var logStreamReader = new StreamReader(logStream))
                {
                    var lineNumber = 0;

                    do
                    {
                        var rawLogLine = logStreamReader.ReadLine();
                        if (rawLogLine != null)
                        {
                            lineNumber++;

                            var logEntry = CweCsvLogEntryParser.ParseLogEntryFromLine(
                                lineNumber,
                                rawLogLine,
                                (e, line) => _logger.LogError(
                                    Error.FailedToParseCweDataEntry,
                                    e,
                                    "Failed to parse log entry line {LineNumber} in file {LogFile}",
                                    csvFilePath,
                                    line));

                            if (logEntry != null)
                            {
                                csvDocument.Entries.Add(logEntry);
                            }
                        }
                    }
                    while (!logStreamReader.EndOfStream);
                }

                stopwatch.Stop();

                _logger.LogInformation("Finished parsing CWE data file {CsvFilePath} ({RecordCount} records).", csvFilePath, csvDocument.Entries.Count);

                return csvDocument;
            }
            catch (Exception exception)
            {
                if (stopwatch.IsRunning)
                {
                    stopwatch.Stop();
                }

                _logger.LogError(Error.FailedToParseCweData, exception, "Failed to parse CWE data file {CsvFilePath}.", csvFilePath);

                throw;
            }
            finally
            {
                logStream.Dispose();
            }
        }
    }
}
