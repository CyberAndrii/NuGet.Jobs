// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Data.SqlClient;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Options;

namespace UpdateVulnerabilityData.CWE
{
    public class CWEDataClient : VulnerabilityDataClient, ICWEDataClient
    {
        private static readonly string _localDataImportFolder = Path.Combine(Environment.CurrentDirectory, "CWE-data-import");
        private static readonly string _localDataExportFolder = Path.Combine(Environment.CurrentDirectory, "CWE-data-export");
        private static readonly string _pathToDownloadedArchive = Path.Combine(_localDataImportFolder, "cwe-data.zip");

        private readonly ICWECsvFileParser _csvFileParser;
        private readonly ICWEDataDownloader _cweDataDownloader;

        public CWEDataClient(
            ICWECsvFileParser csvFileParser,
            ICWEDataDownloader cweDataDownloader,
            IOptionsSnapshot<UpdateVulnerabilityDataConfiguration> configuration)
            : base(configuration)
        {
            _csvFileParser = csvFileParser ?? throw new ArgumentNullException(nameof(csvFileParser));
            _cweDataDownloader = cweDataDownloader ?? throw new ArgumentNullException(nameof(cweDataDownloader));
        }

        public async Task RefreshCWEDataAsync(SqlConnection sqlConnection, CancellationToken cancellationToken)
        {
            if (sqlConnection == null)
            {
                throw new ArgumentNullException(nameof(sqlConnection));
            }

            if (cancellationToken == null)
            {
                throw new ArgumentNullException(nameof(cancellationToken));
            }

            // Ensure the target folders exist and are clean.
            PrepareLocalDirectories(_localDataImportFolder, _localDataExportFolder);

            // Fetch CWE data for the 'Development Concepts' view.
            var extractedCsvFilePath = await _cweDataDownloader.DownloadAndExtractCsvDataToDiskAsync(_pathToDownloadedArchive, cancellationToken);

            // Parse the CSV-formatted source file.
            var csvDocument = _csvFileParser.Parse(extractedCsvFilePath);

            // Export to JSON.
            SaveProjectedJsonFileToDisk(csvDocument);

            // Import projected data into database.
            await ImportIntoDatabase(sqlConnection, csvDocument, cancellationToken);

            // Save source data to backup location.
            await BackupSourceData(extractedCsvFilePath);
        }

        private async Task BackupSourceData(string extractedCsvFilePath)
        {
            // todo
        }

        private void SaveProjectedJsonFileToDisk(CWECsvDocument csvDocument)
        {
            var targetFilePath = Path.Combine(_localDataExportFolder, $"cwe.json");
            var json = CWEJsonFileExporter.RenderJson(csvDocument);
            File.WriteAllText(targetFilePath, json);
        }

        private async Task ImportIntoDatabase(SqlConnection sqlConnection, CWECsvDocument csvDocument, CancellationToken cancellationToken)
        {
            // todo
        }
    }
}