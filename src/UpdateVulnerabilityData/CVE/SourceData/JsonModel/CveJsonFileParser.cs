// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.IO;
using System.Linq;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;

namespace UpdateVulnerabilityData.CVE
{
    public class CveJsonFileParser : ICveJsonFileParser
    {
        private const int _descriptionMaxLength = 300;

        private readonly ILogger<CveJsonFileParser> _logger;

        public CveJsonFileParser(ILogger<CveJsonFileParser> logger)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        public CveFlattenedJsonDocument Parse(string path)
        {
            if (path == null)
            {
                throw new ArgumentNullException(nameof(path));
            }

            _logger.LogInformation("Parsing CVE source data file {FilePath}", path);

            var json = File.ReadAllText(path);
            var document = JsonConvert.DeserializeObject<CveJsonDocument>(json);

            // Flatten the data into the desired format for consumption by autocomplete APIs.
            var flattenedJson = FlattenJson(document, out var resultCount);

            _logger.LogInformation("Finished parsing CVE data file {FilePath} ({RecordCount} records).", path, resultCount);

            return flattenedJson;
        }

        private CveFlattenedJsonDocument FlattenJson(CveJsonDocument document, out int resultCount)
        {
            var flattenedDocument = new CveFlattenedJsonDocument();
            flattenedDocument.Timestamp = document.Timestamp;

            resultCount = 0;
            foreach (var item in document.Items)
            {
                var cve = new CveFlattenedJsonItem();
                cve.Id = item.Cve?.Id?.Id?.RemoveSurroundingQuotes();

                if (cve.Id == null)
                {
                    continue;
                }

                // Select the English description (which is the default/mandatory for CVE source data)
                cve.Description = item.Cve.Description.Data
                    .FirstOrDefault(i => string.Equals(i.Language, "en", StringComparison.OrdinalIgnoreCase))
                    ?.Value
                    .RemoveSurroundingQuotes()
                    .TruncateAtWordBoundary(_descriptionMaxLength);

                if (!CveImportHelper.MustAddToInitialImport(cve.Description))
                {
                    continue;
                }

                cve.CvssRating = item.GetCvssRating();

                cve.LastModifiedDate = item.LastModified;
                cve.PublishedDate = item.Published;

                resultCount++;
                flattenedDocument.Items.Add(cve);
            }

            return flattenedDocument;
        }
    }
}