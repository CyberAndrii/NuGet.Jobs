// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.IO;

namespace UpdateVulnerabilityData.CVE
{
    public class CveMetaFileParser : ICveMetaFileParser
    {
        public IDictionary<string, string> Parse(string filePath)
        {
            if (filePath == null)
            {
                throw new ArgumentNullException(nameof(filePath));
            }

            // Read the file and parse the key-value pairs line by line. Example below.
            //
            // lastModifiedDate: 2019-02-21T03:01:10-05:00
            // size: 19627664
            // zipSize: 681008
            // gzSize: 680872
            // sha256: A3358706DD0AED1458D73EF8399F2CD0A7E562BE1D2F88D7B582C3D2A2DF0F2A

            string line;
            var metadata = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
            using (var streamReader = new StreamReader(filePath))
            {
                while ((line = streamReader.ReadLine()) != null)
                {
                    // Split by first occurrence of the ':' character, 
                    // separating the key (1st part) and the value (2nd part).
                    var index = line.IndexOf(':');
                    var key = line.Substring(0, index).Trim();
                    var value = line.Substring(index + 1, line.Length - index - 1).Trim();

                    metadata.Add(key, value);
                }
            }

            return metadata;
        }
    }
}