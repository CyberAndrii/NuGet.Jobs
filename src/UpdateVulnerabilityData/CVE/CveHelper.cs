// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using NuGet.Services.Entities;

namespace UpdateVulnerabilityData.CVE
{
    internal static class CveHelper
    {
        internal const string Rejected = "** REJECT ** ";
        internal const string Reserved = "** RESERVED ** ";
        internal const string Disputed = "** DISPUTED ** ";
        internal const string Split = "** SPLIT ** ";
        internal const string Unverifiable = "** UNVERIFIABLE ** ";
        internal const string UnverifiablePrerelease = "** UNVERIFIABLE, PRERELEASE ** ";

        /// <summary>
        /// Determines whether a <see cref="Cve"/> must be added to the initial data import
        /// based on the <see cref="Cve.Description"/>.
        /// </summary>
        /// <param name="description">The <see cref="Cve.Description"/>.</param>
        /// <returns><c>True</c> if the <see cref="Cve"/> must be imported; otherwise <c>false</c>.</returns>
        internal static bool MustAddToInitialImport(string description)
        {
            // REJECT state should be filtered out during initial import.
            if (description.StartsWith(Rejected, StringComparison.Ordinal))
            {
                return false;
            }

            // RESERVED state is not published in NVD database.
            // source: https://nvd.nist.gov/general/faq#81ead9e8-8be8-4019-9c50-374f8ce3baf1
            if (description.StartsWith(Reserved, StringComparison.Ordinal))
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// Determines whether a <see cref="Cve"/> must be listed
        /// based on the <see cref="Cve.Description"/>.
        /// </summary>
        /// <param name="description">The <see cref="Cve.Description"/>.</param>
        /// <returns><c>True</c> if the <see cref="Cve"/> must be listed; otherwise <c>false</c>.</returns>
        internal static bool DetermineListed(string description)
        {
            // REJECT state should be unlisted.
            if (description.StartsWith(Rejected, StringComparison.Ordinal))
            {
                return false;
            }

            return true;
        }

        internal static CveStatus DetermineStatus(string description)
        {
            if (description.StartsWith(Rejected, StringComparison.Ordinal))
            {
                return CveStatus.Rejected;
            }
            else if (description.StartsWith(Reserved, StringComparison.Ordinal))
            {
                return CveStatus.Reserved;
            }
            else if (description.StartsWith(Disputed, StringComparison.Ordinal))
            {
                return CveStatus.Disputed;
            }
            else if (description.StartsWith(Split, StringComparison.Ordinal))
            {
                return CveStatus.Split;
            }
            else if (description.StartsWith(Unverifiable, StringComparison.Ordinal)
                || description.StartsWith(UnverifiablePrerelease, StringComparison.Ordinal))
            {
                return CveStatus.Unverifiable;
            }
            else
            {
                // Other states are currenlty non-distinguishable in the source data feed.
                // Any published CVE entry in the source data feed that has no specific status-label in its description
                // is considered 'Analyzed' (for simplicity).
                return CveStatus.Analyzed;
            }
        }
    }
}