// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.IO;
using System.Linq;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;

namespace UpdateVulnerabilityData.CVE
{
    public class CVEJsonFileParser : ICVEJsonFileParser
    {
        private readonly ILogger<CVEJsonFileParser> _logger;

        public CVEJsonFileParser(ILogger<CVEJsonFileParser> logger)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        public CVEFlattenedJsonDocument Parse(string path)
        {
            if (path == null)
            {
                throw new ArgumentNullException(nameof(path));
            }

            _logger.LogInformation("Parsing {FilePath}", path);

            var json = File.ReadAllText(path);
            var document = JsonConvert.DeserializeObject<CVEJsonDocument>(json);

            // Flatten the data into the desired format for consumption by autocomplete APIs.
            return FlattenJson(document);
        }

        private CVEFlattenedJsonDocument FlattenJson(CVEJsonDocument document)
        {
            var flattenedDocument = new CVEFlattenedJsonDocument();
            flattenedDocument.Timestamp = document.Timestamp;

            foreach (var item in document.Items)
            {
                var cve = new CVEFlattenedJsonItem();
                cve.ID = item.CVE?.ID?.ID;

                // Select the English description
                cve.Description = item.CVE.Description.Data.FirstOrDefault(i => string.Equals(i.Language, "en", StringComparison.OrdinalIgnoreCase))?.Value;

                if (cve.ID == null)
                {
                    continue;
                }

                flattenedDocument.Items.Add(cve);
            }

            return flattenedDocument;
        }
    }
}