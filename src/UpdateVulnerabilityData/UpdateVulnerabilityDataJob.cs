// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Data.SqlClient;
using System.Net.Http;
using System.Threading.Tasks;
using Autofac;
using Microsoft.ApplicationInsights;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using NuGet.Jobs;
using NuGet.Jobs.Configuration;
using NuGetGallery;
using UpdateVulnerabilityData.CVE;
using UpdateVulnerabilityData.CWE;
using UpdateVulnerabilityData.Storage;

namespace UpdateVulnerabilityData
{
    internal class UpdateVulnerabilityDataJob : JsonConfigurationJob
    {
        private const string UpdateVulnerabilityDataConfigurationSectionName = "UpdateVulnerabilityDataConfiguration";

        public override async Task Run()
        {
            var vulnerabilityDataClient = _serviceProvider.GetRequiredService<IVulnerabilityDataClient>();

            await vulnerabilityDataClient.RefreshAsync();
        }

        protected override void ConfigureAutofacServices(ContainerBuilder containerBuilder)
        {
        }

        protected override void ConfigureJobServices(IServiceCollection services, IConfigurationRoot configurationRoot)
        {
            ConfigureInitializationSection<UpdateVulnerabilityDataConfiguration>(services, configurationRoot);

            services.Configure<UpdateVulnerabilityDataConfiguration>(configurationRoot.GetSection(UpdateVulnerabilityDataConfigurationSectionName));

            services.AddTransient<ITelemetryService, TelemetryService>();

            services.AddTransient<ICweCsvFileParser, CweCsvFileParser>();
            services.AddTransient<ICweDataDownloader, CweDataDownloader>();

            services.AddTransient<ICveJsonFileParser, CveJsonFileParser>();
            services.AddTransient<ICveMetaFileParser, CveMetaFileParser>();
            services.AddTransient<ICveDataDownloader, CveDataDownloader>();

            services.AddTransient<IVulnerabilityDataClient>(c =>
            {
                var configurationAccessor = c.GetRequiredService<IOptionsSnapshot<UpdateVulnerabilityDataConfiguration>>();

                if (configurationAccessor.Value.SourceDataType == SourceDataType.Cve)
                {
                    return new CveDataClient(
                        c.GetRequiredService<ICveJsonFileParser>(),
                        c.GetRequiredService<ICveDataDownloader>(),
                        c.GetRequiredService<ILogger<CveDataClient>>(),
                        configurationAccessor,
                        c.GetRequiredService<Func<Task<SqlConnection>>>(),
                        c.GetRequiredService<IVulnerabilityDetailsStorage>(),
                        c.GetRequiredService<ITelemetryService>());
                }
                else
                {
                    return new CweDataClient(
                        c.GetRequiredService<ICweCsvFileParser>(),
                        c.GetRequiredService<ICweDataDownloader>(),
                        c.GetRequiredService<ILogger<CweDataClient>>(),
                        configurationAccessor,
                        c.GetRequiredService<Func<Task<SqlConnection>>>(),
                        c.GetRequiredService<IVulnerabilityDetailsStorage>(),
                        c.GetRequiredService<ITelemetryService>());
                }
            });

            services.AddSingleton<IVulnerabilityDetailsStorage, VulnerabilityDetailsCloudStorage>(c =>
            {
                var configurationAccessor = c.GetRequiredService<IOptionsSnapshot<UpdateVulnerabilityDataConfiguration>>();

                return new VulnerabilityDetailsCloudStorage(
                    new CloudBlobClientWrapper(
                        configurationAccessor.Value.BackupConnectionString,
                        readAccessGeoRedundant: false),
                    configurationAccessor.Value.BackupContainerName,
                    c.GetRequiredService<ILogger<VulnerabilityDetailsCloudStorage>>());
            });

            services.AddSingleton<Func<Task<SqlConnection>>>(c =>
            {
                return async () => await OpenSqlConnectionAsync<GalleryDbConfiguration>();
            });

            services.AddSingleton<HttpClient>();
            services.AddSingleton(new TelemetryClient());
        }
    }
}