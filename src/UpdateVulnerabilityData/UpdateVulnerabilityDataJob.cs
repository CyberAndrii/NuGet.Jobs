// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Data.SqlClient;
using System.Net.Http;
using System.Threading.Tasks;
using Autofac;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using NuGet.Jobs;
using NuGet.Jobs.Configuration;
using NuGetGallery;
using UpdateVulnerabilityData.CVE;
using UpdateVulnerabilityData.CWE;
using UpdateVulnerabilityData.Storage;

namespace UpdateVulnerabilityData
{
    internal class UpdateVulnerabilityDataJob : JsonConfigurationJob
    {
        private const string UpdateVulnerabilityDataConfigurationSectionName = "UpdateVulnerabilityDataConfiguration";

        public override async Task Run()
        {
            var logger = _serviceProvider.GetRequiredService<ILogger<UpdateVulnerabilityDataJob>>();
            var cweDataClient = _serviceProvider.GetRequiredService<ICweDataClient>();
            var cveDataClient = _serviceProvider.GetRequiredService<ICveDataClient>();
            var configuration = _serviceProvider.GetRequiredService<IOptionsSnapshot<UpdateVulnerabilityDataConfiguration>>().Value;

            logger.LogInformation("Execution mode: {ExecutionMode}", configuration.Mode);

            if (string.Equals(configuration.Mode, ExecutionMode.InitialImport, StringComparison.OrdinalIgnoreCase))
            {
                await InitialImport(cweDataClient, cveDataClient);
            }
            else
            {
                await Update(cweDataClient, cveDataClient, configuration);
            }
        }

        private async Task Update(ICweDataClient cweDataClient, ICveDataClient cveDataClient, UpdateVulnerabilityDataConfiguration configuration)
        {
            // todo: atomicity
            using (var sqlConnection = await OpenSqlConnectionAsync<GalleryDbConfiguration>())
            {
                var entitiesContext = new VulnerabilityEntitiesContext(sqlConnection);

                // todo


                // Commit changes to the database.
                await entitiesContext.SaveChangesAsync();
            }
        }

        private async Task InitialImport(ICweDataClient cweDataClient, ICveDataClient cveDataClient)
        {
            Func<Task<SqlConnection>> openSqlConnectionFunction() => async () => await OpenSqlConnectionAsync<GalleryDbConfiguration>();

            // Import CVE data.
            await cveDataClient.ImportCveDataAsync(openSqlConnectionFunction());

            // Import CWE data.
            await cweDataClient.ImportCweDataAsync(openSqlConnectionFunction());
        }

        protected override void ConfigureAutofacServices(ContainerBuilder containerBuilder)
        {
        }

        protected override void ConfigureJobServices(IServiceCollection services, IConfigurationRoot configurationRoot)
        {
            ConfigureInitializationSection<UpdateVulnerabilityDataConfiguration>(services, configurationRoot);

            services.Configure<UpdateVulnerabilityDataConfiguration>(configurationRoot.GetSection(UpdateVulnerabilityDataConfigurationSectionName));

            services.AddTransient<ICweDataClient, CweDataClient>();
            services.AddTransient<ICweCsvFileParser, CweCsvFileParser>();
            services.AddTransient<ICweDataDownloader, CweDataDownloader>();

            services.AddTransient<ICveDataClient, CveDataClient>();
            services.AddTransient<ICveJsonFileParser, CveJsonFileParser>();
            services.AddTransient<ICveDataDownloader, CveDataDownloader>();

            services.AddSingleton<IBackupDestination, CloudStorageBackupDestination>(c =>
            {
                var configurationAccessor = c.GetRequiredService<IOptionsSnapshot<UpdateVulnerabilityDataConfiguration>>();

                return new CloudStorageBackupDestination(
                    new CloudBlobClientWrapper(
                        configurationAccessor.Value.BackupConnectionString,
                        readAccessGeoRedundant: false),
                    configurationAccessor.Value.BackupContainerName,
                    c.GetRequiredService<ILogger<CloudStorageBackupDestination>>());
            });

            services.AddSingleton<HttpClient>();
        }
    }
}