// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using NuGet.Services.Logging;

namespace UpdateVulnerabilityData
{
    public class TelemetryService
        : ITelemetryService
    {
        private const string CreatedVulnerabilityDataItem = "CreatedVulnerabilityDataItem";
        private const double DefaultDownloadSpeed = 1;
        private const string Id = "Id";
        private const string FileDownloadedSeconds = "FileDownloadedSeconds";
        private const string FileDownloadSpeed = "FileDownloadSpeedBytesPerSec";
        private const string FileUri = "FileUri";
        private const string FileSize = "FileSize";
        private const string SourceDataType = "SourceDataType";
        private const string UpdatedVulnerabilityDataItem = "UpdatedVulnerabilityDataItem";
        private const string UpdateSourceDataStarted = "UpdateSourceDataStarted";
        private const string UpdateSourceDataCompleted = "UpdateSourceDataCompleted";

        private readonly ITelemetryClient _telemetryClient;

        public TelemetryService(ITelemetryClient telemetryClient)
        {
            _telemetryClient = telemetryClient ?? throw new ArgumentNullException(nameof(telemetryClient));
        }

        public void TrackFileDownloaded(string fromUrl, TimeSpan duration, long size)
        {
            var uriBuilder = new UriBuilder(fromUrl);
            uriBuilder.Query = null;
            var absoluteUri = uriBuilder.Uri.AbsoluteUri;

            _telemetryClient.TrackMetric(
                FileDownloadedSeconds,
                duration.TotalSeconds,
                new Dictionary<string, string>
                {
                    { FileUri, absoluteUri },
                    { FileSize, size.ToString() },
                });
            _telemetryClient.TrackMetric(
                FileDownloadSpeed,
                duration.TotalSeconds > 0 ? size / duration.TotalSeconds : DefaultDownloadSpeed,
                new Dictionary<string, string>
                {
                    { FileUri, absoluteUri },
                    { FileSize, size.ToString() },
                });
        }

        public void TrackCreatedVulnerabilityDataItem(string sourceDataType, string id)
        {
            _telemetryClient.TrackMetric(
                CreatedVulnerabilityDataItem,
                1,
                new Dictionary<string, string>
                {
                    { SourceDataType, sourceDataType },
                    { Id, id }
                });
        }

        public void TrackUpdatedVulnerabilityDataItem(string sourceDataType, string id)
        {
            _telemetryClient.TrackMetric(
                UpdatedVulnerabilityDataItem,
                1,
                new Dictionary<string, string>
                {
                    { SourceDataType, sourceDataType },
                    { Id, id }
                });
        }

        public void TrackUpdateCompletedEvent(string sourceDataType)
        {
            _telemetryClient.TrackMetric(
                UpdateSourceDataCompleted,
                1,
                new Dictionary<string, string>
                {
                    { SourceDataType, sourceDataType }
                });
        }

        public void TrackUpdateStartedEvent(string sourceDataType)
        {
            _telemetryClient.TrackMetric(
                UpdateSourceDataStarted,
                1,
                new Dictionary<string, string>
                {
                    { SourceDataType, sourceDataType }
                });
        }
    }
}