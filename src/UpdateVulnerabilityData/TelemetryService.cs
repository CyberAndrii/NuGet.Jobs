// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using NuGet.Services.Logging;

namespace UpdateVulnerabilityData
{
    public class TelemetryService
        : ITelemetryService
    {
        private const string CreatedNewCve = "CreatedNewCve";
        private const string CreatedNewCwe = "CreatedNewCwe";
        private const string CveId = "CveId";
        private const string CweId = "CweId";
        private const double DefaultDownloadSpeed = 1;
        private const string FileDownloadedSeconds = "FileDownloadedSeconds";
        private const string FileDownloadSpeed = "FileDownloadSpeedBytesPerSec";
        private const string FileUri = "FileUri";
        private const string FileSize = "FileSize";
        private const string UpdatedCve = "UpdatedCve";
        private const string UpdatedCwe = "UpdatedCwe";
        private const string UpdateCveDataStarted = "UpdateCveDataStarted";
        private const string UpdateCveDataCompleted = "UpdateCveDataCompleted";
        private const string UpdatedCveDataFilesCount = "UpdatedCveDataFilesCount";

        private readonly ITelemetryClient _telemetryClient;

        public TelemetryService(ITelemetryClient telemetryClient)
        {
            _telemetryClient = telemetryClient ?? throw new ArgumentNullException(nameof(telemetryClient));
        }

        public void TrackFileDownloaded(string fromUrl, TimeSpan duration, long size)
        {
            var uriBuilder = new UriBuilder(fromUrl);
            uriBuilder.Query = null;
            var absoluteUri = uriBuilder.Uri.AbsoluteUri;

            _telemetryClient.TrackMetric(
                FileDownloadedSeconds,
                duration.TotalSeconds,
                new Dictionary<string, string>
                {
                    { FileUri, absoluteUri },
                    { FileSize, size.ToString() },
                });
            _telemetryClient.TrackMetric(
                FileDownloadSpeed,
                duration.TotalSeconds > 0 ? size / duration.TotalSeconds : DefaultDownloadSpeed,
                new Dictionary<string, string>
                {
                    { FileUri, absoluteUri },
                    { FileSize, size.ToString() },
                });
        }

        public void TrackUpdateCveDataStartedEvent()
        {
            _telemetryClient.TrackMetric(
                UpdateCveDataStarted,
                1);
        }

        public void TrackUpdateCveDataCompletedEvent(int updatedDataFilesCount)
        {
            _telemetryClient.TrackMetric(
                UpdateCveDataCompleted,
                1,
                new Dictionary<string, string>
                {
                    { UpdatedCveDataFilesCount, updatedDataFilesCount.ToString() }
                });
        }

        public void TrackCreatedNewCve(string cveId)
        {
            _telemetryClient.TrackMetric(
                CreatedNewCve,
                1,
                new Dictionary<string, string>
                {
                    { CveId, cveId }
                });
        }

        public void TrackUpdatedCve(string cveId)
        {
            _telemetryClient.TrackMetric(
                UpdatedCve,
                1,
                new Dictionary<string, string>
                {
                    { CveId, cveId }
                });
        }

        public void TrackCreatedNewCwe(string cweId)
        {
            _telemetryClient.TrackMetric(
                   CreatedNewCwe,
                   1,
                   new Dictionary<string, string>
                   {
                    { CweId, cweId }
                   });
        }

        public void TrackUpdatedCwe(string cweId)
        {
            _telemetryClient.TrackMetric(
                UpdatedCwe,
                1,
                new Dictionary<string, string>
                {
                    { CweId, cweId }
                });
        }
    }
}