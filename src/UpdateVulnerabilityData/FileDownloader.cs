// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Security.Cryptography;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;

namespace UpdateVulnerabilityData
{
    public class FileDownloader
    {
        private readonly HttpClient _httpClient;

        public FileDownloader(HttpClient httpClient, ILogger logger)
        {
            _httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));
            Logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        protected ILogger Logger { get; }

        protected async Task<FileDownloadResult> DownloadFileAsync(string sourceFileUrl, string targetFilePath)
        {
            Stream fileStream = null;
            var stopwatch = Stopwatch.StartNew();

            try
            {
                // Download the file from the network to a temporary file.
                string eTag;
                using (var response = await _httpClient.GetAsync(sourceFileUrl, HttpCompletionOption.ResponseHeadersRead))
                {
                    Logger.LogInformation(
                        "Received response {StatusCode}: {ReasonPhrase} of type {ContentType} for request {SourceUrl}",
                        response.StatusCode,
                        response.ReasonPhrase,
                        response.Content.Headers.ContentType,
                        sourceFileUrl);

                    if (response.StatusCode != HttpStatusCode.OK)
                    {
                        throw new InvalidOperationException($"Expected status code {HttpStatusCode.OK} for file download, actual: {response.StatusCode}");
                    }

                    eTag = response.Headers.ETag.Tag?.RemoveSurroundingQuotes();

                    using (var networkStream = await response.Content.ReadAsStreamAsync())
                    {
                        fileStream = File.Create(targetFilePath);

                        await networkStream.CopyToAsync(fileStream);
                    }
                }

                fileStream.Position = 0;

                stopwatch.Stop();

                var sha256String = CalculateSha256(fileStream);
                var fileSize = fileStream.Length;

                Logger.LogInformation(
                    "Downloaded {FileSizeInBytes} bytes in {DownloadElapsedTime} seconds for request {SourceUri}",
                    fileStream.Length,
                    stopwatch.Elapsed.TotalSeconds,
                    sourceFileUrl);

                fileStream.Close();

                return new FileDownloadResult(
                    targetFilePath, 
                    eTag, 
                    sha256String,
                    fileSize);
            }
            finally
            {
                fileStream?.Dispose();
            }
        }

        public static string CalculateSha256(Stream fileStream)
        {
            string sha256String;
            using (var sha256 = SHA256.Create())
            {
                var digestBytes = sha256.ComputeHash(fileStream);
                sha256String = BitConverter
                        .ToString(digestBytes)
                        .Replace("-", string.Empty)
                        .ToLowerInvariant();
            }

            return sha256String;
        }
    }
}