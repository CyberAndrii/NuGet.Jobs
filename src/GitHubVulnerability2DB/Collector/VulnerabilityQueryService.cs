// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using GitHubVulnerability2Db.GraphQL;
using NuGet.Services.Cursor;

namespace GitHubVulnerability2Db.Collector
{
    public class VulnerabilityQueryService : IVulnerabilityQueryService
    {
        public VulnerabilityQueryService(IQueryService queryService)
        {
            _queryService = queryService;
        }

        private readonly IQueryService _queryService;

        public async Task<IReadOnlyList<Edge<SecurityVulnerability>>> GetVulnerabilitiesSince(ReadCursor<string> cursor, CancellationToken token)
        {
            await cursor.Load(token);
            var response = await _queryService.QueryAsync(CreateQuery(cursor.Value), token);
            return response?.Data?.SecurityVulnerabilities?.Edges?.ToList();
        }

        private string CreateQuery(string cursorValue)
        {
            return @"
{
  securityVulnerabilities(first: 100, ecosystem: NUGET, orderBy: {field: UPDATED_AT, direction: ASC}" + (string.IsNullOrEmpty(cursorValue) ? "" : $", after: {cursorValue}") + @") {
    edges {
      cursor
      node {
        package {
          name
        }
        vulnerableVersionRange
        firstPatchedVersion {
          identifier
        }
        severity
        updatedAt
        advisory {
          databaseId
          description
          identifiers {
            type
            value
          }
          origin
          publishedAt
          references {
            url
          }
          severity
          updatedAt
          withdrawnAt
        }
      }
    }
  }
}";
        }
    }
}
