// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using GitHubVulnerability2Db.Ingest;
using NuGet.Services.Cursor;

namespace GitHubVulnerability2Db.Collector
{
    public class VulnerabilityCollector : IVulnerabilityCollector
    {
        public VulnerabilityCollector(
            ReadWriteCursor<string> cursor,
            IVulnerabilityQueryService queryService,
            IVulnerabilityIngestor ingestor)
        {
            _cursor = cursor;
            _queryService = queryService;
            _ingestor = ingestor;
        }

        private readonly ReadWriteCursor<string> _cursor;
        private readonly IVulnerabilityQueryService _queryService;
        private readonly IVulnerabilityIngestor _ingestor;

        public async Task ProcessNewVulnerabilities(CancellationToken token)
        {
            var vulnerabilities = await _queryService.GetVulnerabilitiesSince(_cursor, token);
            if (vulnerabilities != null && vulnerabilities.Any())
            {
                var latestCursor = vulnerabilities.Last().Cursor;
                await _ingestor.Ingest(vulnerabilities.Select(v => v.Node).ToList(), token);
                _cursor.Value = latestCursor;
                await _cursor.Save(token);
            }
        }
    }
}
